"""
面向对象程序设计：把一组数据和处理数据的方法组成对象，把行为相同的对象归纳为类，
通过封装隐藏对象的内部细节，通过继承实现类的特化和泛化，通过多态实现基于对象类型的动态分派。

对象 ---> 接收消息的实体，是一个具体的概念。
    1. 一切皆为对象
    2. 对象都有属性（静态特征）和行为（动态特征）
    3. 每个对象都是独一无二的
    4. 对象一定属于某个类
类 ---> 对象的蓝图和模板，是一个抽象的概念。

如果Python中已有的数据类型无法满足程序的需求，通过定义类可以创建新的数据类型。

定义类通常要做两件事情：
    1. 数据抽象 ---> 找静态特征 ---> 名词
    2. 行为抽象 ---> 找动态特征 ---> 动词

写在类中的函数通常被称为方法，这些方法是对象可以接收的消息。
"""


# 1. 定义类
# class是定义类的关键字，Student是类名，使用驼峰命名法（每个单词首字母大写）
class Student:
    """学生类"""

    # Python程序中__开头和结尾的属性和方法都有特殊的用途和意义
    # 初始化方法 ---> 魔术方法（魔法方法）---> 调用构造器创建对象时会自动调用
    def __init__(self, stuid, name):
        self.id = stuid
        self.name = name

    def study(self, *courses):
        """学习"""
        for course_name in courses:
            print(f'{self.name}正在学习{course_name}')

    def play(self):
        """玩耍"""
        print(f'{self.name}正在玩耍')


def main():
    # 2. 创建对象
    # 有了类就可以创建对象 ---> 构造器语法
    # 我们定义的变量就是对象的引用，通过变量就可以访问到内存中的对象
    stu1 = Student(1001, '王大锤')
    # 3. 给对象发消息
    # Student.study(stu1, 'Python程序设计')
    # 通过对象的引用使用成员运算符调用对象的方法（给对象发出消息）
    stu1.study('Python程序设计', 'Web前端开发', 'MySQL数据库应用', '数据分析从入门到进阶')
    stu2 = Student(1002, '白元芳')
    stu2.play()


if __name__ == '__main__':
    main()
